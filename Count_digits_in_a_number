**Approach 1** ----- using while loop

package DSA;
import java.util.*;
public class Count_Digit_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int count=0;
		while(n>0)
		{
			count++;
			n/=10;
		}
		System.out.println(count);
	}
}


Complexity: O(n)




**Approach 2**--- convert integer into String, then count length of String

package DSA;

import java.util.*;
public class Count_digit_2 {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		String str=Integer.toString(n);
		System.out.println(str.length());
	}
}

Complexity: O(1)



**Approach 3**-----> Using log base 10 method
The number of digits in an integer = the upper bound of log10(n).
ex:
n = 12345
log10(12345) = 4.091
Integral part of 4.091 is 4 and 4 + 1 =  5 



package DSA;
import java.util.*;
public class Count_digit_3 {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int digits = (int) Math.floor(Math.log10(n) + 1);
        System.out.println(digits);
	}
}

Complexity: O(1)
